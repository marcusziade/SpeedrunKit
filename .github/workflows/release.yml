name: Release

on:
  push:
    tags:
      - 'v*'

env:
  SWIFT_VERSION: '6.1'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-artifacts:
    name: Build ${{ matrix.os }} artifacts
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            artifact_name: speedrun-cli-macos
            asset_name: speedrun-cli-macos
          - os: ubuntu-latest
            artifact_name: speedrun-cli-linux
            asset_name: speedrun-cli-linux
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Swift (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: swift-actions/setup-swift@v2
        with:
          swift-version: ${{ env.SWIFT_VERSION }}
          
      - name: Select Xcode (macOS)
        if: matrix.os == 'macos-latest'
        run: sudo xcode-select -s /Applications/Xcode_15.4.app
        
      - name: Build Release
        run: swift build --product speedrun-cli -c release
        
      - name: Package artifact
        run: |
          cd .build/release
          tar czf ${{ matrix.asset_name }}.tar.gz speedrun-cli
          
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: .build/release/${{ matrix.asset_name }}.tar.gz
          asset_name: ${{ matrix.asset_name }}.tar.gz
          asset_content_type: application/gzip

  docker-release:
    name: Docker Release
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Extract version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            marcusziade/speedrunkit:latest
            marcusziade/speedrunkit:${{ steps.version.outputs.VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max